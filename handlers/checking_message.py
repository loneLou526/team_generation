from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile

from logging_config import setup_logging
import os

from generate_team import TeamGenerator


logger = setup_logging()

class AddTask(StatesGroup):
    get_number_participants = State()
    get_xlsx_file = State()


router = Router()

@router.message(Command(commands=['gen']))
async def get_task(message: Message, state: FSMContext):
    try:
        await state.set_state(AddTask.get_number_participants)
        await message.answer(
            text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ:'
        )
    except Exception as e:
        logger.error(e)
        await message.answer(
            text='–û–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –º–µ–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, '
                 '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —á—Ç–æ–± –æ–Ω–∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–ª–∏.'
        )


@router.message(AddTask.get_number_participants)
async def get_task(message: Message, state: FSMContext):
    try:
        int(message.text)
        await state.update_data(quantity=message.text)

        await message.answer(
            text='–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx'
        )
        await state.set_state(AddTask.get_xlsx_file)
    except Exception as e:
        if 'invalid literal for int() with base 10:' in str(e):
            await message.answer(
                text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ß–ò–°–õ–û!!! –ù–ï —Å–∏–º–≤–æ–ª, –ù–ï –∑–Ω–∞–∫, –∞ –ß–ò–°–õ–û.'
            )
        else:
            logger.error(e)
            await message.answer(
                text='–û–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –º–µ–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, '
                     '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —á—Ç–æ–± –æ–Ω–∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–ª–∏.'
            )

@router.message(AddTask.get_xlsx_file)
async def get_task(message: Message, state: FSMContext):
    try:
        bot = message.bot
        document = message.document
        if not document.file_name.endswith(('.xlsx', '.xls')):
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).")
            return

        data = await state.get_data()
        file_path = os.path.join('uploaded_files', document.file_name)
        file_info = await bot.get_file(document.file_id)
        await bot.download(file_info, file_path)

        await message.reply("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã...")
        teamGen = TeamGenerator()
        result_file = teamGen.generate_team(file_path, int(data['quantity']))

        await message.answer_document(document=FSInputFile(result_file), caption="–í–æ—Ç —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏! üéâ")
        await state.clear()
    except Exception as e:
        logger.error(e)
        await message.answer(
            text='–û–π, –ø—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –º–µ–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, '
                 '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —á—Ç–æ–± –æ–Ω–∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–ª–∏.'
        )